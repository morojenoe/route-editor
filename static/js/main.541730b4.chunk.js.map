{"version":3,"sources":["route-input.js","route-list/route-list-point.js","route-list/route-list.js","route-map/route-map-placemarks.js","route-map/route-map-polyline.js","route-map/route-map.js","route-editor.js","serviceWorker.js","index.js"],"names":["RouteInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","length","props","maxInputLength","setState","newName","trim","routePoints","findIndex","item","name","keyCode","validateInput","onEnter","isErrorState","concat","_this2","react_default","a","createElement","TextField_default","placeholder","onKeyDown","key","inputEnter","onChange","event","target","helperText","error","fullWidth","Component","defaultProps","RouteListPoint","pointName","commonProps","onDelete","_this$props","dragHandle","classes","Paper_default","index_es","container","direction","justify","alignItems","className","routeItem","IconButton_default","aria-label","onClick","Delete_default","fontSize","withStyles","padding","RouteList","onRemoveItem","bind","assertThisInitialized","newPoints","onListChange","js_default","itemKey","template","list","onMoveEnd","RouteMapPlacemarks","newCoordinates","onPositionChanged","map","point","id","react_yandex_maps_umd_production_min","modules","geometry","coordinates","onDragEnd","originalEvent","getCoordinates","defaultProperties","iconContent","balloonContent","options","draggable","RouteMapPolyline","balloonCloseButton","strokeColor","strokeWidth","strokeOpacity","RouteMap","mapLoadingError","mapInstance","setMapInstance","console","log","width","height","instanceRef","defaultOptions","autoFitToViewport","defaultState","center","zoom","onError","showError","route_map_placemarks","route_map_polyline","errorLayout","mapLayout","RouteEditor","points","slice","push","getCenter","p","splice","newRoutePoints","Grid_default","spacing","xs","lg","route_input","addPoint","route_list","newList","setRoutePoints","removePoint","route_map","Boolean","window","location","hostname","match","__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__","ReactDOM","render","route_editor","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.541730b4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\n\nclass RouteInput extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\"\n    };\n  }\n\n  onChange(value) {\n    if (value.length <= this.props.maxInputLength) {\n      this.setState({value: value});\n    }\n  }\n\n  validateInput() {\n    const newName = this.state.value.trim();\n    const { routePoints } = this.props;\n    return (\n      newName &&\n      newName.length <= this.props.maxInputLength &&\n      routePoints.findIndex(item => item.name === newName) === -1\n    );\n  }\n\n  inputEnter(keyCode) {\n    const enterKeyCode = 13;\n    if (keyCode === enterKeyCode) {\n      if (this.validateInput()) {\n        this.props.onEnter(this.state.value.trim());\n        this.setState({value: \"\"});\n      }\n    }\n  }\n\n  isErrorState() {\n    return !this.validateInput() && this.state.value.trim().length > 0;\n  }\n\n  helperText() {\n    if (this.isErrorState()) {\n      return 'This name already exists';\n    }\n    return `${this.state.value.length}/${this.props.maxInputLength}`;\n  }\n\n  render() {\n    return (\n      <TextField\n        value={this.state.value}\n        placeholder=\"Type point name...\"\n        onKeyDown={key => this.inputEnter(key.keyCode)}\n        onChange={event => this.onChange(event.target.value)}\n        helperText={this.helperText()}\n        error={this.isErrorState()}\n        fullWidth\n      />\n    );\n  }\n}\n\nRouteInput.defaultProps = {\n  maxInputLength: 16\n};\n\nRouteInput.propTypes = {\n  maxInputLength: PropTypes.number.isRequired,\n  onEnter: PropTypes.func.isRequired,\n  routePoints: PropTypes.array.isRequired\n};\n\nexport default RouteInput;\n","import React, { Component } from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Grid, withStyles } from '@material-ui/core';\n\nconst styles = {\n  routeItem: {\n    padding: 10\n  }\n};\n\nclass RouteListPoint extends Component {\n  onDelete(pointName) {\n    this.props.commonProps.onDelete(pointName);\n  }\n\n  render() {\n    const { item, dragHandle, classes } = this.props;\n    return dragHandle(\n      <Paper>\n        <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\n          <Grid item>\n            {\n              (\n                <pre className={classes.routeItem}>{item.name}</pre>\n              )\n            }\n          </Grid>\n          <Grid item>\n            <IconButton aria-label=\"Delete\" onClick={() => this.onDelete(item.name)}>\n              <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(styles)(RouteListPoint);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport DraggableList from 'react-draggable-list';\nimport RouteListPoint from './route-list-point';\n\nclass RouteList extends Component {\n  constructor() {\n    super();\n    this.onRemoveItem = this.onRemoveItem.bind(this);\n  }\n\n  onListChange(newPoints) {\n    this.props.onListChange(newPoints);\n  }\n\n  onRemoveItem(pointName) {\n    this.props.onRemoveItem(pointName);\n  }\n\n  render() {\n    const { routePoints } = this.props;\n    return (\n      <DraggableList\n        itemKey=\"name\"\n        template={RouteListPoint}\n        list={routePoints}\n        onMoveEnd={newPoints => this.onListChange(newPoints)}\n        commonProps={{\n          onDelete: (pointName) => this.onRemoveItem(pointName)\n        }}\n      />\n    );\n  }\n}\n\nRouteList.propTypes = {\n  routePoints: PropTypes.array.isRequired,\n  onListChange: PropTypes.func.isRequired,\n  onRemoveItem: PropTypes.func.isRequired\n};\n\nexport default RouteList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Placemark } from 'react-yandex-maps';\n\nclass RouteMapPlacemarks extends Component {\n  onPositionChanged(pointName, newCoordinates) {\n    this.props.onPositionChanged(pointName, newCoordinates);\n  }\n\n  render() {\n    const { routePoints } = this.props;\n    return routePoints.map((point, id) => (\n      <Placemark\n        modules={['geoObject.addon.balloon']}\n        key={`${point.name}.${id}`}\n        geometry={point.coordinates}\n        onDragEnd={item => this.onPositionChanged(point.name,\n            item.originalEvent.target.geometry.getCoordinates())\n        }\n        defaultProperties={{\n          iconContent: id + 1,\n          balloonContent: point.name,\n        }}\n        options={{\n          draggable: true,\n        }}\n      />\n    ));\n  }\n}\n\nRouteMapPlacemarks.propTypes = {\n  routePoints: PropTypes.array.isRequired,\n  onPositionChanged: PropTypes.func.isRequired,\n};\n\nexport default RouteMapPlacemarks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Polyline } from 'react-yandex-maps';\n\nfunction RouteMapPolyline(props) {\n  const { routePoints } = props;\n  return (\n    <Polyline\n      geometry={routePoints.map(point => point.coordinates)}\n      options={{\n        balloonCloseButton: false,\n        strokeColor: '#000',\n        strokeWidth: 4,\n        strokeOpacity: 0.5,\n      }}\n    />\n  );\n}\n\nRouteMapPolyline.propTypes = {\n  routePoints: PropTypes.array.isRequired,\n};\n\nexport default RouteMapPolyline;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map } from 'react-yandex-maps';\n\nimport RouteMapPlacemarks from './route-map-placemarks';\nimport RouteMapPolyline from './route-map-polyline';\n\nclass RouteMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      mapLoadingError: false,\n    };\n  }\n\n  onPositionChanged(pointName, newCoordinates) {\n    this.props.onPositionChanged(pointName, newCoordinates);\n  }\n\n  setMapInstance(mapInstance) {\n    this.props.setMapInstance(mapInstance);\n  }\n\n  showError(error) {\n    console.log(error);\n    this.setState({mapLoadingError: true});\n  }\n\n  mapLayout() {\n    const { routePoints, width, height } = this.props;\n    return (\n      <Map\n        instanceRef={map => this.setMapInstance(map)}\n        defaultOptions={{\n          autoFitToViewport: 'always'\n        }}\n        defaultState={{ center: [55.75, 37.57], zoom: 4 }}\n        width={width}\n        height={height}\n        onError={error => this.showError(error)}\n      >\n        <RouteMapPlacemarks\n          routePoints={routePoints}\n          onPositionChanged={\n            (pointName, newCoordinates) => this.onPositionChanged(pointName, newCoordinates)\n          }\n        />\n        <RouteMapPolyline routePoints={routePoints} />\n      </Map>\n    );\n  }\n\n  errorLayout() {\n    return (\n      <div>Error loading map, please try to use chrome.</div>\n    );\n  }\n\n  render() {\n    if (this.state.mapLoadingError) {\n      return this.errorLayout();\n    } else {\n      return this.mapLayout();\n    }\n  }\n}\n\nRouteMap.defaultProps = {\n  width: '100%',\n  height: '450px'\n};\n\nRouteMap.propTypes = {\n  width: PropTypes.string.isRequired,\n  height: PropTypes.string.isRequired,\n  routePoints: PropTypes.array.isRequired,\n  onPositionChanged: PropTypes.func.isRequired,\n  setMapInstance: PropTypes.func.isRequired\n};\n\nexport default RouteMap;\n","import React, { Component } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport { YMaps } from 'react-yandex-maps';\n\nimport RouteInput from './route-input';\nimport RouteList from './route-list/route-list';\nimport RouteMap from './route-map/route-map';\n\nclass RouteEditor extends Component {\n  constructor() {\n    super();\n    this.mapInstance = null;\n    this.state = {\n      routePoints: []\n    };\n  }\n\n  addPoint(pointName) {\n    const points = this.state.routePoints.slice();\n    points.push({\n      name: pointName,\n      coordinates: this.mapInstance.getCenter()\n    });\n    this.setState({routePoints: points});\n  }\n\n  setMapInstance(mapInstance) {\n    this.mapInstance = mapInstance;\n  }\n\n  onPositionChanged(pointName, newCoordinates) {\n    const points = this.state.routePoints.slice();\n    const id = points.findIndex(p => p.name === pointName);\n    if (id !== -1) {\n      points[id].coordinates = newCoordinates;\n      this.setState({routePoints: points});\n    }\n  }\n\n  removePoint(pointName) {\n    let points = this.state.routePoints.slice();\n    const id = points.findIndex(p => p.name === pointName);\n    if (id !== -1) {\n      points.splice(id, 1);\n      this.setState({routePoints: points});\n    }\n  }\n\n  setRoutePoints(newRoutePoints) {\n    this.setState({routePoints: newRoutePoints});\n  }\n\n  render() {\n    return (\n      <YMaps>\n        <Grid\n          container\n          spacing={24}\n          justify=\"flex-start\"\n        >\n          <Grid item xs={3} lg={2}>\n            <Grid container direction=\"column\" spacing={16}>\n              <Grid item>\n                <RouteInput\n                  onEnter={name => this.addPoint(name)}\n                  routePoints={this.state.routePoints}\n                />\n              </Grid>\n              <Grid item>\n                <RouteList\n                  routePoints={this.state.routePoints}\n                  onListChange={newList => this.setRoutePoints(newList)}\n                  onRemoveItem={pointName => this.removePoint(pointName)}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={9} lg={10}>\n            <RouteMap\n              onPositionChanged={\n                (pointName, newCoordinates) => this.onPositionChanged(pointName, newCoordinates)\n              }\n              setMapInstance={map => this.setMapInstance(map)}\n              routePoints={this.state.routePoints}\n            />\n          </Grid>\n        </Grid>\n      </YMaps>\n    );\n  }\n}\n\nexport default RouteEditor;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RouteEditor from './route-editor';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__ = true;\nReactDOM.render(<RouteEditor />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}